# --------------------------------------------------
# ENCRYPTED BY B14CK-KN1GH7 (NAFIS FUAD)
# Github   : http://github.com/nfs-tech-bd
# Facebook : http://facebook.com/nafis.fuad.904
# Telegram : http://t.me/Nafisfuad1
# --------------------------------------------------
NFS=$(mktemp)
base64 -d  >${NFS}<<B14CK-KN1GH7
IyEvYmluL3NoCkJJQmx1ZT0nXDAzM1sxOzk0bScgICAgICAgIyBCbHVlCk5DPSdcZVswbScKV0g9J1wwMzNbMTszN20nClJFUE89Imh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9KZXJyeVNCRy9TQkcvbWFpbi8iCmNkCmNsZWFyCnNsb3dzYmcoKSB7CmNsZWFyICAKZWNobyAtZSAiJEJJQmx1ZeKVreKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVriR7TkN9IgplY2hvIC1lICIkQklCbHVl4pSCJE5DICAgICAgICAgXGVbMTszMm1Db25maWd1cmFyIERvbWluaW8gU2xvd0ROUyAgICAgICAgJEJJQmx1ZeKUgiR7TkN9IiAgCmVjaG8gLWUgIiRCSUJsdWXilbDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDila8ke05DfSIKZWNobyAtZSAiJEJJQmx1ZeKVreKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVriR7TkN9IiAKZWNobyAtZSAiJEJJQmx1ZeKUgiAgXGVbMTszMm1FU0NPR0UgVU5BIE9QQ0lPTiBQQVJBIE1PRElGSUNBUiBTTE9XRE5TICAgICAke05DfSIgIAplY2hvIC1lICIkQklCbHVl4pSCICBbIDEgXSAgXGVbMTszMm1Qcm9waW8gRG9taW5pbyBTbG93RE5TICAgICAgICAgICAgICAgICR7TkN9IiAgCmVjaG8gLWUgIiRCSUJsdWXilIIgIFsgMiBdICBcZVsxOzMybURvbWluaW8gQWxldG9yaW8gRnJlZSAgICAgICAgICAgICAgICAgJHtOQ30iCmVjaG8gLWUgIiRCSUJsdWXilIIgIFsgMyBdICBcZVsxOzMybURvbWluaW8gQWxldG9yaW8gQnkgSkVSUlktU0JHICAgICAgICAgJHtOQ30iICAgICAKZWNobyAtZSAiJEJJQmx1ZeKUgiAgWyB4IF0gIFxlWzE7MzJtUmVncmVzYXIgYWwgTUVOVSAgICAgICAgICAgICAgICAgJHtOQ30iICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKZWNobyAtZSAiJEJJQmx1ZeKVsOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVryR7TkN9IgplY2hvICIiCnJlYWQgLXAgIiAgIFBvciBGYXZvciBTZWxlY2Npb25hIGRlbCAxIGFsIDMgOiAiIHNsb3cKY2xlYXIKaWYgW1sgJHNsb3cgPT0gIjEiIF1dOyB0aGVuCiNpbnN0YWxsIHNsb3dkbnMKc3VkbyBhcHQgaW5zdGFsbCBzcXVpZCAteQojc2V0dGluZyBJUHRhYmxlcwppcHRhYmxlcyAtSSBJTlBVVCAtcCB1ZHAgLS1kcG9ydCA1MzAwIC1qIEFDQ0VQVAppcHRhYmxlcyAtdCBuYXQgLUkgUFJFUk9VVElORyAtcCB1ZHAgLS1kcG9ydCA1MyAtaiBSRURJUkVDVCAtLXRvLXBvcnRzIDUzMDAKbmV0ZmlsdGVyLXBlcnNpc3RlbnQgc2F2ZQpuZXRmaWx0ZXItcGVyc2lzdGVudCByZWxvYWQKCiNkZWxldGUgZGlyZWN0b3J5CnJtIC1yZiAvZXRjL3hyYXkvZG5zCnJtIGRucwoKI2lucHV0IG5hbWVzZXJ2ZXIgbWFudWFsIHRvIGNsb3VkZmxhcmUKY2xlYXIKZWNobyAtZSAiJEJJQmx1ZeKVreKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVriR7TkN9IgplY2hvIC1lICIkQklCbHVl4pSCJE5DICAgICAgICAgICAgICAgXGVbMTszMm1ET01JTklPIFNMT1dETlMgICAgICAgICAgICAgJEJJQmx1ZeKUgiR7TkN9IiAgCmVjaG8gLWUgIiRCSUJsdWXilbDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDila8ke05DfSIKZWNobyAtZSAiJEJJQmx1ZeKVreKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVriR7TkN9IgplY2hvIC1lICIkQklCbHVl4pSCJE5DICBcZVsxOzMybURlYmVzIGRlIHRlbmVyIFlhIENvbmZpZ3VyYWRvIHR1IERvbWluaW8gJEJJQmx1ZeKUgiR7TkN9IiAgCmVjaG8gLWUgIiRCSUJsdWXilbDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDila8ke05DfSIKcmVhZCAtcnAgIkludHJvZHVjZSBUdSBEb21pbmlvIE5TIDogIiAtZSBzdWIKU1VCX0RPTUFJTj0ke3N1Yn0KTlNfRE9NQUlOPSR7U1VCX0RPTUFJTn0KZWNobyAkTlNfRE9NQUlOID4gL2V0Yy94cmF5L2RucwoKbmFtZXNlcnZlcj0kKGNhdCAvZXRjL3hyYXkvZG5zKQojYXB0IHVwZGF0ZSAteQojYXB0IGluc3RhbGwgLXkgcHl0aG9uMyBweXRob24zLWRuc2xpYiBuZXQtdG9vbHMKI2FwdCBpbnN0YWxsIG5jdXJzZXMtdXRpbHMgLXkKI2FwdCBpbnN0YWxsIGRuc3V0aWxzIC15CiNhcHQgaW5zdGFsbCBnb2xhbmcgLXkKI2FwdCBpbnN0YWxsIGdpdCAteQojYXB0IGluc3RhbGwgY3VybCAteQojYXB0IGluc3RhbGwgd2dldCAteQojYXB0IGluc3RhbGwgbmN1cnNlcy11dGlscyAteQojYXB0IGluc3RhbGwgc2NyZWVuIC15CiNhcHQgaW5zdGFsbCBjcm9uIC15CiNhcHQgaW5zdGFsbCBpcHRhYmxlcyAteQojYXB0IGluc3RhbGwgLXkgZ2l0IHNjcmVlbiB3aG9pcyBkcm9wYmVhciB3Z2V0CiNhcHQgaW5zdGFsbCAteSBwd2dlbiBweXRob24gcGhwIGpxIGN1cmwKI2FwdCBpbnN0YWxsIC15IHN1ZG8gZ251dGxzLWJpbgojYXB0IGluc3RhbGwgLXkgbWxvY2F0ZSBkaC1tYWtlIGxpYmF1ZGl0LWRldiBidWlsZC1lc3NlbnRpYWwKI2FwdCBpbnN0YWxsIC15IGRvczJ1bml4IGRlYmNvbmYtdXRpbHMKI3NlcnZpY2UgY3JvbiByZWxvYWQKI3NlcnZpY2UgY3JvbiByZXN0YXJ0Cgoja29uZmlndXJhc2kgc2xvd2RucwpybSAtcmYgL2V0Yy9zbG93ZG5zCm1rZGlyIC1tIDc3NyAvZXRjL3Nsb3dkbnMKd2dldCAtcSAtTyAvZXRjL3Nsb3dkbnMvZG5zdHQtc2VydmVyICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vSmVycnlTQkcvU0JHL21haW4vc2xvd2Rucy9kbnN0dC1zZXJ2ZXIiCndnZXQgLXEgLU8gL2V0Yy9zbG93ZG5zL2Ruc3R0LWNsaWVudCAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0plcnJ5U0JHL1NCRy9tYWluL3Nsb3dkbnMvZG5zdHQtY2xpZW50IgpjZApjaG1vZCAreCAvZXRjL3Nsb3dkbnMvZG5zdHQtc2VydmVyCmNobW9kICt4IC9ldGMvc2xvd2Rucy9kbnN0dC1jbGllbnQKLi9kbnN0dC1zZXJ2ZXIgLWdlbi1rZXkgLXByaXZrZXktZmlsZSBzZXJ2ZXIua2V5IC1wdWJrZXktZmlsZSBzZXJ2ZXIucHViCmNobW9kICt4ICoKZWNobyAtZSAiXGVbMTszMm0gRklOQUxJWkFORE8gU0xPV0ROUy4uLiIKI3NldHRpbmcgSVB0YWJsZXMKaXB0YWJsZXMgLUkgSU5QVVQgLXAgdWRwIC0tZHBvcnQgNTMwMCAtaiBBQ0NFUFQKaXB0YWJsZXMgLXQgbmF0IC1JIFBSRVJPVVRJTkcgLXAgdWRwIC0tZHBvcnQgNTMgLWogUkVESVJFQ1QgLS10by1wb3J0cyA1MzAwCm5ldGZpbHRlci1wZXJzaXN0ZW50IHNhdmUKbmV0ZmlsdGVyLXBlcnNpc3RlbnQgcmVsb2FkCmNkCiNpbnN0YWxsIGNsaWVudC5zZXJ2aWNlCmNhdCA+IC9ldGMvc3lzdGVtZC9zeXN0ZW0vY2xpZW50LnNlcnZpY2UgPDwgRU5ECltVbml0XQpEZXNjcmlwdGlvbj1DbGllbnQgU2xvd0ROUyBCeSBIaWRlU1NICkRvY3VtZW50YXRpb249aHR0cHM6Ly9oaWRlc3NoLmNvbQpBZnRlcj1uZXR3b3JrLnRhcmdldCBuc3MtbG9va3VwLnRhcmdldAoKW1NlcnZpY2VdClR5cGU9c2ltcGxlClVzZXI9cm9vdApDYXBhYmlsaXR5Qm91bmRpbmdTZXQ9Q0FQX05FVF9BRE1JTiBDQVBfTkVUX0JJTkRfU0VSVklDRQpBbWJpZW50Q2FwYWJpbGl0aWVzPUNBUF9ORVRfQURNSU4gQ0FQX05FVF9CSU5EX1NFUlZJQ0UKTm9OZXdQcml2aWxlZ2VzPXRydWUKRXhlY1N0YXJ0PS9ldGMvc2xvd2Rucy9kbnN0dC1jbGllbnQgLXVkcCA4LjguOC44OjUzIC0tcHVia2V5LWZpbGUgL2V0Yy9zbG93ZG5zL3NlcnZlci5wdWIgJG5hbWVzZXJ2ZXIgMTI3LjAuMC4xOjE0MwpSZXN0YXJ0PW9uLWZhaWx1cmUKCltJbnN0YWxsXQpXYW50ZWRCeT1tdWx0aS11c2VyLnRhcmdldApFTkQKCmNkCiNpbnN0YWxsIHNlcnZlci5zZXJ2aWNlCmNhdCA+IC9ldGMvc3lzdGVtZC9zeXN0ZW0vc2VydmVyLnNlcnZpY2UgPDwgRU5ECltVbml0XQpEZXNjcmlwdGlvbj1TZXJ2ZXIgU2xvd0ROUyBCeSBIaWRlU1NICkRvY3VtZW50YXRpb249aHR0cHM6Ly9oaWRlc3NoLmNvbQpBZnRlcj1uZXR3b3JrLnRhcmdldCBuc3MtbG9va3VwLnRhcmdldAoKW1NlcnZpY2VdClR5cGU9c2ltcGxlClVzZXI9cm9vdApDYXBhYmlsaXR5Qm91bmRpbmdTZXQ9Q0FQX05FVF9BRE1JTiBDQVBfTkVUX0JJTkRfU0VSVklDRQpBbWJpZW50Q2FwYWJpbGl0aWVzPUNBUF9ORVRfQURNSU4gQ0FQX05FVF9CSU5EX1NFUlZJQ0UKTm9OZXdQcml2aWxlZ2VzPXRydWUKRXhlY1N0YXJ0PS9ldGMvc2xvd2Rucy9kbnN0dC1zZXJ2ZXIgLXVkcCA6NTMwMCAtcHJpdmtleS1maWxlIC9ldGMvc2xvd2Rucy9zZXJ2ZXIua2V5ICRuYW1lc2VydmVyIDEyNy4wLjAuMToxMTAKUmVzdGFydD1vbi1mYWlsdXJlCgpbSW5zdGFsbF0KV2FudGVkQnk9bXVsdGktdXNlci50YXJnZXQKRU5ECgojcGVybWlzc2lvbiBzZXJ2aWNlIHNsb3dkbnMKY2QKY2htb2QgK3ggL2V0Yy9zeXN0ZW1kL3N5c3RlbS9jbGllbnQuc2VydmljZQpjaG1vZCAreCAvZXRjL3N5c3RlbWQvc3lzdGVtL3NlcnZlci5zZXJ2aWNlCnBraWxsIGRuc3R0LXNlcnZlcgpwa2lsbCBkbnN0dC1jbGllbnQKCnN5c3RlbWN0bCBkYWVtb24tcmVsb2FkCnN5c3RlbWN0bCBlbmFibGUgY2xpZW50CnN5c3RlbWN0bCBlbmFibGUgc2VydmVyCnN5c3RlbWN0bCBzdGFydCBjbGllbnQKc3lzdGVtY3RsIHN0YXJ0IHNlcnZlcgpzeXN0ZW1jdGwgcmVzdGFydCBjbGllbnQKc3lzdGVtY3RsIHJlc3RhcnQgc2VydmVyCmNsZWFyCnJtIC1mIC9yb290L2luc3RhbGxzbC5zaApmaQppZiBbWyAkc2xvdyA9PSAiMiIgXV07IHRoZW4KI2luc3RhbGwgc2xvd2Rucwp3Z2V0ICR7UkVQT31zbG93ZG5zL2luc3RhbGxzbDIuc2ggJiYgY2htb2QgK3ggaW5zdGFsbHNsMi5zaCAmJiBiYXNoIC4vaW5zdGFsbHNsMi5zaApjbGVhcgpmaQppZiBbWyAkc2xvdyA9PSAiMyIgXV07IHRoZW4KaW5zdGFsbCBzbG93ZG5zCndnZXQgJHtSRVBPfXNsb3dkbnMvc2xvd2Rucy5zaCAmJiBjaG1vZCAreCBzbG93ZG5zLnNoICYmIGJhc2ggLi9zbG93ZG5zLnNoCmNsZWFyCmZpCmlmIFtbICRzbG93ID09ICJ4IiBdXTsgdGhlbgpjbGVhcgpybSAtZiAvcm9vdC9pbnN0YWxsc2wuc2gKbWVudQpmaQp9CnNsb3dzYmcKZXhpdAo=
B14CK-KN1GH7
source ${NFS}
rm -rf ${NFS}