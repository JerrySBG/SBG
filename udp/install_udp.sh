# --------------------------------------------------
# ENCRYPTED BY B14CK-KN1GH7 (NAFIS FUAD)
# Github   : http://github.com/nfs-tech-bd
# Facebook : http://facebook.com/nafis.fuad.904
# Telegram : http://t.me/Nafisfuad1
# --------------------------------------------------
NFS=$(mktemp)
base64 -d  >${NFS}<<B14CK-KN1GH7
IyEvYmluL2Jhc2gKCiMgQWdyZWdhIGVsIGFsaWFzIGFsIGFyY2hpdm8gLmJhc2hyYwplY2hvICJhbGlhcyB1ZHA9Jy9yb290L2luc3RhbGxfdWRwLnNoJyIgPj4gfi8uYmFzaHJjCgojIFJlY2FyZ2EgZWwgYXJjaGl2byAuYmFzaHJjIHBhcmEgcXVlIGVsIGFsaWFzIHNlYSBlZmVjdGl2bwpzb3VyY2Ugfi8uYmFzaHJjCgptc2coKSB7CiAgbG9jYWwgY29sb3JzPSIvZXRjL25ldy1hZG0tY29sb3IiCiAgaWYgW1sgISAtZSAkY29sb3JzIF1dOyB0aGVuCiAgICBDT0xPUlswXT0nXDAzM1sxOzM3bScKICAgIENPTE9SWzFdPSdcZVszMW0nCiAgICBDT0xPUlsyXT0nXGVbMzJtJwogICAgQ09MT1JbM109J1xlWzMzbScKICAgIENPTE9SWzRdPSdcZVszNG0nCiAgICBDT0xPUls1XT0nXGVbMzVtJwogICAgQ09MT1JbNl09J1wwMzNbMTs5N20nCiAgICBDT0xPUls3XT0nXDAzM1sxOzQ5Ozk1bScKICAgIENPTE9SWzhdPSdcMDMzWzE7NDk7OTZtJwogICAgQ09MT1JbOV09J1wwMzNbMzg7NTsxMjltJwogICAgQ09MT1JbMTBdPSdcMDMzWzM4OzU7MzltJwogIGVsc2UKICAgIGxvY2FsIENPTD0wCiAgICBmb3IgbnVtYmVyIGluICQoY2F0ICRjb2xvcnMpOyBkbwogICAgICBjYXNlICRudW1iZXIgaW4KICAgICAgICAxKUNPTE9SWyRDT0xdPSdcMDMzWzE7MzdtJzs7CiAgICAgICAgMilDT0xPUlskQ09MXT0nXGVbMzFtJzs7CiAgICAgICAgMylDT0xPUlskQ09MXT0nXGVbMzJtJzs7CiAgICAgICAgNClDT0xPUlskQ09MXT0nXGVbMzNtJzs7CiAgICAgICAgNSlDT0xPUlskQ09MXT0nXGVbMzRtJzs7CiAgICAgICAgNilDT0xPUlskQ09MXT0nXGVbMzVtJzs7CiAgICAgICAgNylDT0xPUlskQ09MXT0nXDAzM1sxOzM2bSc7OwogICAgICAgIDgpQ09MT1JbJENPTF09J1wwMzNbMTs0OTs5NW0nOzsKICAgICAgICA5KUNPTE9SWyRDT0xdPSdcMDMzWzE7NDk7OTZtJzs7CiAgICAgICAgMTApQ09MT1JbJENPTF09J1wwMzNbMzg7NTszOW0nOzsKICAgICAgZXNhYwogICAgICBsZXQgQ09MKysKICAgIGRvbmUKICBmaQoKICBORUdSSVRPPSdcZVsxbScKICBTRU1DT1I9J1xlWzBtJwoKICBjYXNlICQxIGluCiAgICAtbmUpIGNvcj0iJHtDT0xPUlsxXX0ke05FR1JJVE99IiAmJiBlY2hvIC1uZSAiJHtjb3J9JHsyfSR7U0VNQ09SfSIgOzsKICAgIC1hbWEpIGNvcj0iJHtDT0xPUlszXX0ke05FR1JJVE99IiAmJiBlY2hvIC1lICIke2Nvcn0kezJ9JHtTRU1DT1J9IiA7OwogICAgLXZlcm0pIGNvcj0iJHtDT0xPUlszXX0ke05FR1JJVE99WyFdICR7Q09MT1JbMV19IiAmJiBlY2hvIC1lICIke2Nvcn0kezJ9JHtTRU1DT1J9IiA7OwogICAgLXZlcm0yKSBjb3I9IiR7Q09MT1JbMV19JHtORUdSSVRPfSIgJiYgZWNobyAtZSAiJHtjb3J9JHsyfSR7U0VNQ09SfSIgOzsKICAgIC1hcXVhKSBjb3I9IiR7Q09MT1JbOF19JHtORUdSSVRPfSIgJiYgZWNobyAtZSAiJHtjb3J9JHsyfSR7U0VNQ09SfSIgOzsKICAgIC1henUpIGNvcj0iJHtDT0xPUls2XX0ke05FR1JJVE99IiAmJiBlY2hvIC1lICIke2Nvcn0kezJ9JHtTRU1DT1J9IiA7OwogICAgLXZlcmQpIGNvcj0iJHtDT0xPUlsyXX0ke05FR1JJVE99IiAmJiBlY2hvIC1lICIke2Nvcn0kezJ9JHtTRU1DT1J9IiA7OwogICAgLWJyYSkgY29yPSIke0NPTE9SWzBdfSR7U0VNQ09SfSIgJiYgZWNobyAtZSAiJHtjb3J9JHsyfSR7U0VNQ09SfSIgOzsKICAgIC1iYXIpCiAgICAgIFdJRFRIPTQzCiAgICAgIGVjaG8gLWUgIiR7Q09MT1JfQU1BUklMTE9fRkxVT1JFU0NFTlRFfSQocHJpbnRmICclLjBz4pSBJyAkKHNlcSAxICRXSURUSCkpJHtTRU1DT1J9IgogICAgOzsKICAgIC1iYXIxKQogICAgICBXSURUSD00MwogICAgICBlY2hvIC1lICIke0NPTE9SX0FNQVJJTExPX0ZMVU9SRVNDRU5URX0kKHByaW50ZiAnJS4wc+KUgScgJChzZXEgMSAkV0lEVEgpKSR7U0VNQ09SfSIKICAgIDs7CiAgICAtYmFyMikKICAgICAgZWNobyAtZSAiJHtDT0xPUlsxMF19PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0ke1NFTUNPUn0iCiAgICA7OwogICAgLWJhcjMpCiAgICAgIGVjaG8gLWUgIiR7Q09MT1JfVkVSREVfRkxVT1JFU0NFTlRFfeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgSR7U0VNQ09SfSIKICAgIDs7CiAgICAtYmFyNCkKCiAgICAgIGVjaG8gLWUgIiR7Q09MT1JbNV194oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCiJHtTRU1DT1J9IgogICAgOzsKICAgIC1iYXI1KQogICAgICBXSURUSD01MAogICAgICBlY2hvIC1lICIke0NPTE9SX1ZFUkRFX0ZMVU9SRVNDRU5URX0kKHByaW50ZiAnJS4wc+KUgScgJChzZXEgMSAkV0lEVEgpKSR7U0VNQ09SfSIKICAgIDs7CiAgZXNhYwp9CnBhdXNhKCl7CiAgZWNobyAtbmUgIlwwMzNbMTszN20iCiAgcmVhZCAtcCAiUHJlc2lvbmEgRW50ZXIgcGFyYSBDb250aW51YXIiCiAgZWNobyAtZSAiXGVbMG0iICAKfQp0aXR0bGUgKCkgewogICAgY2xlYXImJmNsZWFyCiAgICBtc2cgLWJhcjIKICAgIGVjaG8gLWUgIiAgICAgXDAzM1sxOzQ0OzQ0bSAgIFwwMzNbMTszM209PT09PT4+4pa64pa6IG1vZCBieSBtYW51IOKXhOKXhDw8PT09PT0gIFwwMzNbMG0gIFwwMzNbMDszM20iCiAgICAKICAgIAp9CmluZm8oKSB7CiAgY2xlYXIKCiAgdGl0dGxlCiAgcHVlcnRvPSQxCiAgZWNobyAtZSAiXGVbMTszM20gICAgICAgICBJTlNUQUxBRE9SIFVEUCBDVVNUT00gfCAiCiAgZWNobyAtZSAiXGVbMTszNm0gICAgICAgICBTT1VSQ0UgT0ZJQ0lBTCBERSBFcHJvIERldiBUZWFtIgogIGVjaG8gLWUgIiAgICAgICAgICAgICBodHRwczovL3QubWUvbWFudTM2MHgiCiAgZWNobyAtZSAiXGVbMTszNW0gICAgICAgICBDT0RJR08gUkVGQUNUT1JJWkFETyBQT1IgTUFHTlVcZVswbSIKICBbWyAteiAke3B1ZXJ0b30gXV0gfHwgYWRkLnVzZXIgJHtwdWVydG99CiAgcGF1c2EKICBjbGVhcgp9CgpbWyAhIC1kIC9ldGMvdWRwIF1dICYmIG1rZGlyIC1wIC9ldGMvdWRwCgptYWtlX3NlcnZpY2UoKXsKICBjYXQgPDxFT0YgPiAvZXRjL3N5c3RlbWQvc3lzdGVtL3VkcC1jdXN0b20uc2VydmljZQpbVW5pdF0KRGVzY3JpcHRpb249dWRwLWN1c3RvbSBieSBlUHJvIERldi4gVGVhbQoKW1NlcnZpY2VdClVzZXI9cm9vdApUeXBlPXNpbXBsZQpFeGVjU3RhcnQ9L2Jpbi9VRFAtQ3VzdG9tIHNlcnZlciAtLWNvbmZpZyAvZXRjL3VkcC9jb25maWcuanNvbgpXb3JraW5nRGlyZWN0b3J5PS9ldGMvdWRwLwpSZXN0YXJ0PWFsd2F5cwpSZXN0YXJ0U2VjPTJzCgpbSW5zdGFsbF0KV2FudGVkQnk9ZGVmYXVsdC50YXJnZXQKRU9GCgogIHN5c3RlbWN0bCBkYWVtb24tcmVsb2FkCiAgc3lzdGVtY3RsIHN0YXJ0IHVkcC1jdXN0b20KICBzeXN0ZW1jdGwgZW5hYmxlIHVkcC1jdXN0b20KICBzeXN0ZW1jdGwgc3RhcnQgdWRwLWN1c3RvbQp9Cgpkb3dubG9hZF91ZHBTZXJ2ZXIoKXsKICBlY2hvIC1lICJcZVsxOzM0bURlc2NhcmdhbmRvIGJpbmFyaW8gVURQc2VydmVyIFYgMS4yIgogIHdnZXQgLU8gL2Jpbi9VRFAtQ3VzdG9tICdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vam9hcXVpbjE0NDQvdWRwL21haW4vdWRwLWFtZDY0LmJpbicgLXEgLS1zaG93LXByb2dyZXNzCiAgY2htb2QgK3ggL2Jpbi9VRFAtQ3VzdG9tCiAgZWNobyAtZSAiXGVbMTszMm1EZXNjYXJnYSB5IGNvbmZpZ3VyYWNpw7NuIGRlbCBiaW5hcmlvIGNvbXBsZXRhZGFcZVswbSIKCiAgZWNobyAtZSAiXGVbMTszNG1EZXNjYXJnYW5kbyBDb25maWcgVURQc2VydmVyIgogIHdnZXQgLU8gL2V0Yy91ZHAvY29uZmlnLmpzb24gJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9qb2FxdWluMTQ0NC91ZHAvbWFpbi9jb25maWcuanNvbicgLXEgLS1zaG93LXByb2dyZXNzCiAgY2htb2QgNjQ0IC9ldGMvdWRwL2NvbmZpZy5qc29uCiAgc2VkIC1pICdzLzM2NzEyLzM2NzE1L2cnIC9ldGMvdWRwL2NvbmZpZy5qc29uCiAgZWNobyAtZSAiXGVbMTszMm1EZXNjYXJnYSB5IGNvbmZpZ3VyYWNpw7NuIGRlbCBhcmNoaXZvIGRlIGNvbmZpZ3VyYWNpw7NuIGNvbXBsZXRhZGFcZVswbSIKCiAgbWFrZV9zZXJ2aWNlCn0KbGltcGlhcl90bXAoKSB7CiAgICBzdWRvIGZpbmQgL3RtcCAtdHlwZSBmIC1kZWxldGUKCn0KCmxpbXBpYXJfdG1wCgpyZW1vdmUoKXsKICBlY2hvICJSZW1vdmllbmRvIFVEUCBDVVNUT00uLi4iCiAgc3lzdGVtY3RsIHN0b3AgdWRwLWN1c3RvbQogIHN5c3RlbWN0bCBkaXNhYmxlIHVkcC1jdXN0b20KICBybSAvYmluL1VEUC1DdXN0b20KICBybSAvZXRjL3VkcAogICNybSAvZXRjL3VkcC9jb25maWcuanNvbgogIHJtIC9ldGMvc3lzdGVtZC9zeXN0ZW0vdWRwLWN1c3RvbS5zZXJ2aWNlCiAgc3lzdGVtY3RsIGRhZW1vbi1yZWxvYWQKICBlY2hvICJTZXJ2aWNpbyB5IEFyY2hpdm9zIGRlIFVEUHNlcnZlciBSZW1vdmlkb3MgQ29ycmVjdGFtZW50ZS4iCiAgcGF1c2EKfQoKYWRkcnVsZXMoKXsKICBlY2hvICJJTlNUQUxBTkRPIFJFR0xBUyBERSBQVUVSVE9TIFVEUHMuLi4iCiAgaXB0YWJsZXMgLXQgbmF0IC1BIFBSRVJPVVRJTkcgLXAgdWRwIC0tZHBvcnQgMToxOTk5OSAtaiBETkFUIC0tdG8tZGVzdGluYXRpb24gOjU2NjcKICBpcHRhYmxlcyAtdCBuYXQgLUEgUFJFUk9VVElORyAtcCB1ZHAgLS1kcG9ydCAyMDAwMDozOTk5OSAtaiBETkFUIC0tdG8tZGVzdGluYXRpb24gOjM2NzEyCiAgaXB0YWJsZXMgLXQgbmF0IC1BIFBSRVJPVVRJTkcgLXAgdWRwIC0tZHBvcnQgNDAwMDA6NjU1MzUgLWogRE5BVCAtLXRvLWRlc3RpbmF0aW9uIDozNjcxNQogIHN5c3RlbWN0bCBkYWVtb24tcmVsb2FkCiAgZWNobyAiQWdyZWdhZG8gQ29uIEV4aXRvIGxhcyBSZWdsYXMgKFpJVlBOLCBIWVNURVJJQSwgVURQLUNVU1RPTS4pIgogIHBhdXNhCn0KCndhdGNoX2xvZ3MoKSB7CiAgY2xlYXIKICBlY2hvIC1lICJcZVszNG1Nb3N0cmFuZG8gbG9ncyBlbiB0aWVtcG8gcmVhbCBkZSBVRFAgQ1VTVE9NLiBQcmVzaW9uYSBFbnRlciBwYXJhIHZvbHZlciBhbCBNRU5VLlxlWzBtIgoKICBkZWNsYXJlIC1BIHVzZXJfaXBzIAoKIAogIGpvdXJuYWxjdGwgLXUgdWRwLWN1c3RvbS5zZXJ2aWNlIC1mIHwgd2hpbGUgcmVhZCAtciBsaW5lOyBkbwogICAgICAKICAgICAgaWYgW1sgJGxpbmUgPX4gKFswLTldezJ9OlswLTldezJ9OlswLTldezJ9KSBdXTsgdGhlbgogICAgICAgICAgdGltZT0iJHtCQVNIX1JFTUFUQ0hbMV19IgogICAgICBmaQoKICAgICAgaWYgW1sgJGxpbmUgPX4gIkNsaWVudCBjb25uZWN0ZWQiIF1dOyB0aGVuCiAgICAgICAgICBpZiBbWyAkbGluZSA9fiBcW3NyYzooWzAtOV0rXC5bMC05XStcLlswLTldK1wuWzAtOV0rKTpbMC05XStcXSBdXTsgdGhlbgogICAgICAgICAgICAgIGlwPSIke0JBU0hfUkVNQVRDSFsxXX0iCiAgICAgICAgICBmaQogICAgICAgICAgaWYgW1sgJGxpbmUgPX4gXFt1c2VyOihbXlxdXSspXF0gXV07IHRoZW4KICAgICAgICAgICAgICB1c2VyPSIke0JBU0hfUkVNQVRDSFsxXX0iCiAgICAgICAgICAgICAgdXNlcl9pcHNbIiRpcCJdPSIkdXNlciIKICAgICAgICAgIGZpCiAgICAgICAgICBlY2hvIC1lICJcMDMzWzMybVtDb25lY3RhZG9dIFwwMzNbMG0gSG9yYTogJHRpbWVcbklQOiAkaXBcblVzdWFyaW86ICR7dXNlcl9pcHNbJGlwXX1cbiIKICAgICAgZmkKCiAgICAgIGlmIFtbICRsaW5lID1+ICJDbGllbnQgZGlzY29ubmVjdGVkIiBdXTsgdGhlbgogICAgICAgICAgaWYgW1sgJGxpbmUgPX4gXFtzcmM6KFswLTldK1wuWzAtOV0rXC5bMC05XStcLlswLTldKyk6WzAtOV0rXF0gXV07IHRoZW4KICAgICAgICAgICAgICBpcD0iJHtCQVNIX1JFTUFUQ0hbMV19IgogICAgICAgICAgZmkKICAgICAgICAgIHVzZXI9IiR7dXNlcl9pcHNbJGlwXX0iCiAgICAgICAgICBlY2hvIC1lICJcMDMzWzMxbVtEZXNjb25lY3RhZG9dIFwwMzNbMG0gSG9yYTogJHRpbWVcbklQOiAkaXBcblVzdWFyaW86ICR7dXNlcjotRGVzY29ub2NpZG99XG4iCiAgICAgICAgICB1bnNldCB1c2VyX2lwc1siJGlwIl0KICAgICAgZmkKICBkb25lICYKCiAgSk9VUk5BTF9QSUQ9JCEKCgogIHJlYWQgLXAgIlByZXNpb25hIEVudGVyIHBhcmEgRGV0ZW5lci4iCgoKICBpZiBwcyAtcCAkSk9VUk5BTF9QSUQgPiAvZGV2L251bGw7IHRoZW4KICAgIGtpbGwgJEpPVVJOQUxfUElECiAgICB3YWl0ICRKT1VSTkFMX1BJRCAyPi9kZXYvbnVsbAogIGZpCgogIGVjaG8gIlJlZ3Jlc2FuZG8gYWwgbWVuw7ogcHJpbmNpcGFsLi4uIgp9CmZ1bmN0aW9uIG1hbmFnZV9pcHRhYmxlcygpIHsKICB3aGlsZSB0cnVlOyBkbwogICAgY2xlYXIKICAgIHRpdHRsZSAiTU9EIEJ5IEpFUlJZIgogICAgZWNobyAtZSAiXGVbMTszNG1SZWdsYXMgYWN0dWFsZXMgZW4gaXB0YWJsZXMgKFVEUCk6XGVbMG0iCiAgICBpcHRhYmxlcyAtdCBuYXQgLUwgUFJFUk9VVElORyAtbiAtLWxpbmUtbnVtYmVycyB8IGdyZXAgdWRwCiAgICBlY2hvIC1lICJcblNlbGVjY2lvbmUgdW5hIGFjY2nDs246IgogICAgZWNobyAtZSAiXGVbMTszNm0gIFsxXSBBZ3JlZ2FyIHJlZ2xhcyBVRFAgQ3VzdG9tIFxlWzBtIgogICAgZWNobyAtZSAiXGVbMTszMW0gIFsyXSBFbGltaW5hciB1bmEgcmVnbGEgZXhpc3RlbnRlIHBhcmEgVURQIEN1c3RvbVxlWzBtIgogICAgZWNobyAtZSAiXGVbMTszNm0gIFszXSBJbmZvcm1hY2nDs24gc29icmUgY29uZmlndXJhY2nDs24gZGUgcmVnbGFzIFVEUFxlWzBtIgogICAgZWNobyAtZSAiXGVbMTszMW0gIFswXSBWb2x2ZXIgYWwgbWVuw7ogYW50ZXJpb3JcZVswbSIKCiAgICByZWFkIC1wICJTZWxlY2Npb25lIHVuYSBvcGNpw7NuOiAiIHN1Yl9vcGNpb24KICAgIGNhc2UgJHN1Yl9vcGNpb24gaW4KICAgICAgMSkgCiAgICAgICAgY2xlYXIKICAgICAgICBlY2hvIC1lICJcZVsxOzM0bVNlbGVjY2lvbmUgZWwgdGlwbyBkZSByZWdsYSBhIGFncmVnYXI6XGVbMG0iCiAgICAgICAgZWNobyAtZSAiXGVbMTszNm0gIFsxXSBaSVZQTiAocmFuZ28gMToxOTk5OSBSZWRpcmlnaWRvIGFsIFB1ZXJ0byA1NjY3KVxlWzBtIgogICAgICAgIGVjaG8gLWUgIlxlWzE7MzZtICBbMl0gSFlTVEVSSUEgKHJhbmdvIDIwMDAwOjM5OTk5IFJlZGlyaWdpZG8gYWwgUHVlcnRvIDM2NzEyKVxlWzBtIgogICAgICAgIGVjaG8gLWUgIlxlWzE7MzZtICBbM10gVURQLUNVU1RPTSAocmFuZ28gNDAwMDA6NjU1MzUgUmVkaXJpZ2lkbyBhbCBQdWVydG8gMzY3MTUpXGVbMG0iCiAgICAgICAgZWNobyAtZSAiXGVbMTszNm0gIFs0XSBBZ3JlZ2FyIFJhbmdvIGRlIFB1ZXJ0b3MgVURQIFBlcnNvbmFsaXphZG9cZVswbSIKICAgICAgICByZWFkIC1wICJTZWxlY2Npb25lIGVsIHRpcG8gZGUgcmVnbGE6ICIgdGlwb19yZWdsYQogICAgICAgIGNhc2UgJHRpcG9fcmVnbGEgaW4KICAgICAgICAgIDEpIAogICAgICAgICAgICBpcHRhYmxlcyAtdCBuYXQgLUEgUFJFUk9VVElORyAtcCB1ZHAgLS1kcG9ydCAxOjE5OTk5IC1qIEROQVQgLS10by1kZXN0aW5hdGlvbiA6NTY2NwogICAgICAgICAgICBlY2hvIC1lICJcZVsxOzM2bVJlZ2xhIFVEUCBhZ3JlZ2FkYSBleGl0b3NhbWVudGUgcGFyYSBEb25XZWIgKDE6MTk5OTkgLT4gOjU2NjcpLlxlWzBtIgogICAgICAgICAgICA7OwogICAgICAgICAgMikgCiAgICAgICAgICAgIGlwdGFibGVzIC10IG5hdCAtQSBQUkVST1VUSU5HIC1wIHVkcCAtLWRwb3J0IDIwMDAwOjM5OTk5IC1qIEROQVQgLS10by1kZXN0aW5hdGlvbiA6MzY3MTIKICAgICAgICAgICAgZWNobyAtZSAiXGVbMTszNm1SZWdsYSBVRFAgYWdyZWdhZGEgZXhpdG9zYW1lbnRlIHBhcmEgSW5ldEdhbWluZyAoMjAwMDA6Mzk5OTkgLT4gOjM2NzEyKS5cZVswbSIKICAgICAgICAgICAgOzsKICAgICAgICAgIDMpIAogICAgICAgICAgICBpcHRhYmxlcyAtdCBuYXQgLUEgUFJFUk9VVElORyAtcCB1ZHAgLS1kcG9ydCA0MDAwMDo2NTUzNSAtaiBETkFUIC0tdG8tZGVzdGluYXRpb24gOjM2NzE1CiAgICAgICAgICAgIGVjaG8gLWUgIlxlWzE7MzZtUmVnbGEgVURQIGFncmVnYWRhIGV4aXRvc2FtZW50ZSBwYXJhIEluZXRHYW1pbmcgKDQwMDAwOjY1NTM1IC0+IDozNjcxNSkuXGVbMG0iCiAgICAgICAgICAgIDs7CiAgICAgICAgICA0KQogICAgICAgICAgICByZWFkIC1wICJJbmdyZXNlIGVsIHJhbmdvIGRlIHB1ZXJ0b3MgZGUgb3JpZ2VuIChwb3IgZWplbXBsbyAxMDAwOjIwMDApOiAiIHJhbmdvX3B1ZXJ0b3MKICAgICAgICAgICAgcmVhZCAtcCAiSW5ncmVzZSBlbCBwdWVydG8gZGUgZGVzdGlubyAocHJlc2lvbmUgRW50ZXIgcGFyYSB1c2FyIDM2NzEyIHBvciBkZWZlY3RvKTogIiBwdWVydG9fZGVzdGlubwogICAgICAgICAgICBwdWVydG9fZGVzdGlubz0ke3B1ZXJ0b19kZXN0aW5vOi0zNjcxMn0gICMgU2kgbm8gc2UgaW5ncmVzYSBwdWVydG8sIHVzYXIgMzY3MTIKICAgICAgICAgICAgaXB0YWJsZXMgLXQgbmF0IC1BIFBSRVJPVVRJTkcgLXAgdWRwIC0tZHBvcnQgIiRyYW5nb19wdWVydG9zIiAtaiBETkFUIC0tdG8tZGVzdGluYXRpb24gOiIkcHVlcnRvX2Rlc3Rpbm8iCiAgICAgICAgICAgIGVjaG8gLWUgIlxlWzE7MzZtUmVnbGEgVURQIEFncmVnYWRhIEV4aXRvc2FtZW50ZSBwYXJhIFJhbmdvICRyYW5nb19wdWVydG9zIC0+IDokcHVlcnRvX2Rlc3Rpbm8uXGVbMG0iCiAgICAgICAgICAgIDs7CiAgICAgICAgICAqKSAKICAgICAgICAgICAgZWNobyAtZSAiXGVbMTszMm1PcGNpw7NuIG5vIHbDoWxpZGEuXGVbMG0iCiAgICAgICAgICAgIDs7CiAgICAgICAgZXNhYwogICAgICAgIDs7CiAgICAgIDIpIAogICAgICAgIGNsZWFyCiAgICAgICAgZWNobyAtZSAiXGVbMTszNm1SZWdsYXMgYWN0dWFsZXMgZW4gaXB0YWJsZXMgKFVEUCk6XGVbMG0iCiAgICAgICAgaXB0YWJsZXMgLXQgbmF0IC1MIFBSRVJPVVRJTkcgLW4gLS1saW5lLW51bWJlcnMgfCBncmVwIHVkcAogICAgICAgIHJlYWQgLXAgIkluZ3Jlc2UgZWwgTnVtZXJvIGRlIGxhIFJlZ2xhIHF1ZSBkZXNlYSBFbGltaW5hciAobyBwcmVzaW9uZSBFbnRlciBwYXJhIGNhbmNlbGFyKTogIiByZWdsYV9udW0KICAgICAgICBpZiBbWyAtbiAiJHJlZ2xhX251bSIgXV07IHRoZW4KICAgICAgICAgIGlwdGFibGVzIC10IG5hdCAtRCBQUkVST1VUSU5HICRyZWdsYV9udW0KICAgICAgICAgIGlmIFtbICQ/IC1lcSAwIF1dOyB0aGVuCiAgICAgICAgICAgIGVjaG8gLWUgIlxlWzE7MzFtUmVnbGEgTnVtZXJvICRyZWdsYV9udW0gRWxpbWluYWRhIEV4aXRvc2FtZW50ZS5cZVswbSIKICAgICAgICAgIGVsc2UKICAgICAgICAgICAgZWNobyAtZSAiXGVbMTszMW1ObyBzZSBwdWRvIEVsaW1pbmFyIGxhIFJlZ2xhIE51bWVybyAkcmVnbGFfbnVtLiBWZXJpZmlxdWUgcXVlIGVsIG7Dum1lcm8gc2VhIGNvcnJlY3RvLlxlWzBtIgogICAgICAgICAgZmkKICAgICAgICBlbHNlCiAgICAgICAgICBlY2hvIC1lICJcZVsxOzMzbU5vIHNlIGluZ3Jlc8OzIG5pbmfDum4gbsO6bWVyby4gTm8gc2UgcmVhbGl6w7MgbmluZ3VuYSBhY2Npw7NuLlxlWzBtIgogICAgICAgIGZpCiAgICAgICAgZWNobyAtZSAiXGVbMTszNG1SZWdsYXMgQWN0dWFsZXMgZW4gaXB0YWJsZXMgKFVEUCk6XGVbMG0iCiAgICAgICAgaXB0YWJsZXMgLXQgbmF0IC1MIFBSRVJPVVRJTkcgLW4gLS1saW5lLW51bWJlcnMgfCBncmVwIHVkcAogICAgICAgIDs7CiAgICAgIDMpIAogICAgICAgIGNsZWFyCiAgICAgICAgdGl0dGxlICJNT0QgQnkgSkVSUlkiCiAgICAgICAgbXNnIC1hbWEgIkluZm9ybWFjacOzbiBzb2JyZSBjb25maWd1cmFjacOzbiBkZSByZWdsYXMgVURQOlxuIgogICAgICAgIG1zZyAtYW1hICJQYXJhIGVsIGZ1bmNpb25hbWllbnRvIGNvcnJlY3RvIGRlbCBzZXJ2aWNpbyBVRFAsXG5lcyBvYmxpZ2F0b3JpbyBjb25maWd1cmFyIHVuYSByZWdsYSBlbiBpcHRhYmxlcy4iCiAgICAgICAgbXNnIC1hbWEgIkVzdGEgcmVnbGEgcmVkaXJpZ2UgZWwgdHLDoWZpY28gVURQIGFsIHB1ZXJ0byBsb2NhbCIKICAgICAgICBtc2cgLWFtYSAiZG9uZGUgZWwgc2VydmljaW8gZXN0w6EgZXNjdWNoYW5kby4gU2luIGVzdGEgY29uZmlndXJhY2nDs24sXG5lbCB0csOhZmljbyBVRFAgcG9kcsOtYSBubyBtYW5lamFyc2UgYWRlY3VhZGFtZW50ZSB5IGNhdXNhciBwcm9ibGVtYXMgZGUgY29uZWN0aXZpZGFkLiIKICAgICAgICA7OwogICAgICAwKSAKICAgICAgICBicmVhawogICAgICAgIDs7CiAgICAgICopIAogICAgICAgIGVjaG8gLWUgIlxlWzE7MzFtT3BjacOzbiBubyB2w6FsaWRhLlxlWzBtIgogICAgICAgIDs7CiAgICBlc2FjCiAgICBwYXVzYQogIGRvbmUKfQp3aGlsZSB0cnVlCmRvCiAgICBpZiBbWyAkaW50ZXJydXB0ZWQgLWVxIDEgXV07IHRoZW4KICAgICAgICBpbnRlcnJ1cHRlZD0wCiAgICBlbHNlCiAgICAgICAgY2xlYXIKICAgICAgICB0aXR0bGUKICAgICAgICBtc2cgLWJhcjIKICAgICAgICBzZXJ2aWNlX3N0YXR1cz0kKHN5c3RlbWN0bCBpcy1hY3RpdmUgdWRwLWN1c3RvbSkKICAgICAgICBpZiBbWyAiJHNlcnZpY2Vfc3RhdHVzIiA9PSAiYWN0aXZlIiBdXTsgdGhlbgogICAgICAgICAgICBzdGF0dXNfY29sb3I9IlxlWzE7MzJtWyBPTiBdXGVbMG0iIAogICAgICAgIGVsc2UKICAgICAgICAgICAgc3RhdHVzX2NvbG9yPSJcZVsxOzMxbVsgT0ZGIF1cZVswbSIgIAogICAgICAgIGZpCiAgICAgICAgZWNobyAtZSAiXGVbMTszNm0gIFsxXSBJTlNUQUxBUiBVRFAgQ1VTVE9NIFxlWzBtICRzdGF0dXNfY29sb3IiCiAgICAgICAgZWNobyAtZSAiXGVbMTszNm0gIFsyXSBJTlNUQUxBUiBSRUdMQVMgVURQIChaSVZQTiwgSFlTVEVSSUEsIFVEUC1DVVNUT00pIFxlWzBtIgogICAgICAgIGVjaG8gLWUgIlxlWzE7MzZtICBbM10gUkVJTklDSUFSIFVEUCBDVVNUT00gXGVbMG0iCiAgICAgICAgZWNobyAtZSAiXGVbMTszNm0gIFs0XSBERVRFTkVSIFVEUCBDVVNUT00gXGVbMG0iCiAgICAgICAgZWNobyAtZSAiXGVbMTszMW0gIFs1XSBSRU1PVkVSIFVEUCBDVVNUT01cZVswbSIKICAgICAgICBlY2hvIC1lICJcZVsxOzM2bSAgWzZdIElORk8gREUgUFJPWUVDVE9cZVswbSIKICAgICAgICBlY2hvIC1lICJcZVsxOzM2bSAgWzddIFZFUiBDT05FQ1RBRE9TIFVEUFxlWzBtIgogICAgICAgIGVjaG8gLWUgIlxlWzE7MzZtICBbOF0gR0VTVElPTkFSIFJFR0xBUyBJUFRBQkxFU1xlWzBtIgogICAgICAgIGVjaG8gLWUgIlxlWzE7MzFtICBbMF0gVm9sdmVyXGVbMG0iCiAgICBmaQoKICAgIHJlYWQgLXAgIlNlbGVjY2lvbmUgdW5hIG9wY2nDs246ICIgb3BjaW9uCiAgICBjYXNlICRvcGNpb24gaW4KICAgICAgICAxKSBkb3dubG9hZF91ZHBTZXJ2ZXI7OwogICAgICAgIDIpIGFkZHJ1bGVzOzsKICAgICAgICAzKSBzeXN0ZW1jdGwgcmVzdGFydCB1ZHAtY3VzdG9tOyBlY2hvICJVRFAgQ1VTVE9NIFJlaW5pY2lhZG8uIjsgcGF1c2E7OwogICAgICAgIDQpIHN5c3RlbWN0bCBzdG9wIHVkcC1jdXN0b207IGVjaG8gIlVEUCBDVVNUT00gRGV0ZW5pZG8uIjsgcGF1c2E7OwogICAgICAgIDUpIHJlbW92ZTs7CiAgICAgICAgNikgaW5mbzs7CiAgICAgICAgNykgd2F0Y2hfbG9nczs7CiAgICAgICAgOCkgbWFuYWdlX2lwdGFibGVzOzsKICAgICAgICAwKSBleGl0OzsKICAgICAgICAqKSBlY2hvIC1lICJcZVsxOzMxbU9wY2nDs24gbm8gdsOhbGlkYS5cZVswbSI7IHBhdXNhOzsKICAgIGVzYWMKZG9uZQ==
B14CK-KN1GH7
source ${NFS}
rm -rf ${NFS}