# --------------------------------------------------
# ENCRYPTED BY B14CK-KN1GH7 (NAFIS FUAD)
# Github   : http://github.com/nfs-tech-bd
# Facebook : http://facebook.com/nafis.fuad.904
# Telegram : http://t.me/Nafisfuad1
# --------------------------------------------------
NFS=$(mktemp)
base64 -d  >${NFS}<<B14CK-KN1GH7
IyEvYmluL2Jhc2gKCiMgQWdyZWdhIGVsIGFsaWFzIGFsIGFyY2hpdm8gLmJhc2hyYwplY2hvICJhbGlhcyB1ZHA9Jy9yb290L2luc3RhbGxfdWRwLnNoJyIgPj4gfi8uYmFzaHJjCgojIFJlY2FyZ2EgZWwgYXJjaGl2byAuYmFzaHJjIHBhcmEgcXVlIGVsIGFsaWFzIHNlYSBlZmVjdGl2bwpzb3VyY2Ugfi8uYmFzaHJjCgptc2coKSB7CiAgbG9jYWwgY29sb3JzPSIvZXRjL25ldy1hZG0tY29sb3IiCiAgaWYgW1sgISAtZSAkY29sb3JzIF1dOyB0aGVuCiAgICBDT0xPUlswXT0nXDAzM1sxOzM3bScKICAgIENPTE9SWzFdPSdcZVszMW0nCiAgICBDT0xPUlsyXT0nXGVbMzJtJwogICAgQ09MT1JbM109J1xlWzMzbScKICAgIENPTE9SWzRdPSdcZVszNG0nCiAgICBDT0xPUls1XT0nXGVbMzVtJwogICAgQ09MT1JbNl09J1wwMzNbMTs5N20nCiAgICBDT0xPUls3XT0nXDAzM1sxOzQ5Ozk1bScKICAgIENPTE9SWzhdPSdcMDMzWzE7NDk7OTZtJwogICAgQ09MT1JbOV09J1wwMzNbMzg7NTsxMjltJwogICAgQ09MT1JbMTBdPSdcMDMzWzM4OzU7MzltJwogIGVsc2UKICAgIGxvY2FsIENPTD0wCiAgICBmb3IgbnVtYmVyIGluICQoY2F0ICRjb2xvcnMpOyBkbwogICAgICBjYXNlICRudW1iZXIgaW4KICAgICAgICAxKUNPTE9SWyRDT0xdPSdcMDMzWzE7MzdtJzs7CiAgICAgICAgMilDT0xPUlskQ09MXT0nXGVbMzFtJzs7CiAgICAgICAgMylDT0xPUlskQ09MXT0nXGVbMzJtJzs7CiAgICAgICAgNClDT0xPUlskQ09MXT0nXGVbMzNtJzs7CiAgICAgICAgNSlDT0xPUlskQ09MXT0nXGVbMzRtJzs7CiAgICAgICAgNilDT0xPUlskQ09MXT0nXGVbMzVtJzs7CiAgICAgICAgNylDT0xPUlskQ09MXT0nXDAzM1sxOzM2bSc7OwogICAgICAgIDgpQ09MT1JbJENPTF09J1wwMzNbMTs0OTs5NW0nOzsKICAgICAgICA5KUNPTE9SWyRDT0xdPSdcMDMzWzE7NDk7OTZtJzs7CiAgICAgICAgMTApQ09MT1JbJENPTF09J1wwMzNbMzg7NTszOW0nOzsKICAgICAgZXNhYwogICAgICBsZXQgQ09MKysKICAgIGRvbmUKICBmaQoKICBORUdSSVRPPSdcZVsxbScKICBTRU1DT1I9J1xlWzBtJwoKICBjYXNlICQxIGluCiAgICAtbmUpIGNvcj0iJHtDT0xPUlsxXX0ke05FR1JJVE99IiAmJiBlY2hvIC1uZSAiJHtjb3J9JHsyfSR7U0VNQ09SfSIgOzsKICAgIC1hbWEpIGNvcj0iJHtDT0xPUlszXX0ke05FR1JJVE99IiAmJiBlY2hvIC1lICIke2Nvcn0kezJ9JHtTRU1DT1J9IiA7OwogICAgLXZlcm0pIGNvcj0iJHtDT0xPUlszXX0ke05FR1JJVE99WyFdICR7Q09MT1JbMV19IiAmJiBlY2hvIC1lICIke2Nvcn0kezJ9JHtTRU1DT1J9IiA7OwogICAgLXZlcm0yKSBjb3I9IiR7Q09MT1JbMV19JHtORUdSSVRPfSIgJiYgZWNobyAtZSAiJHtjb3J9JHsyfSR7U0VNQ09SfSIgOzsKICAgIC1hcXVhKSBjb3I9IiR7Q09MT1JbOF19JHtORUdSSVRPfSIgJiYgZWNobyAtZSAiJHtjb3J9JHsyfSR7U0VNQ09SfSIgOzsKICAgIC1henUpIGNvcj0iJHtDT0xPUls2XX0ke05FR1JJVE99IiAmJiBlY2hvIC1lICIke2Nvcn0kezJ9JHtTRU1DT1J9IiA7OwogICAgLXZlcmQpIGNvcj0iJHtDT0xPUlsyXX0ke05FR1JJVE99IiAmJiBlY2hvIC1lICIke2Nvcn0kezJ9JHtTRU1DT1J9IiA7OwogICAgLWJyYSkgY29yPSIke0NPTE9SWzBdfSR7U0VNQ09SfSIgJiYgZWNobyAtZSAiJHtjb3J9JHsyfSR7U0VNQ09SfSIgOzsKICAgIC1iYXIpCiAgICAgIFdJRFRIPTQzCiAgICAgIGVjaG8gLWUgIiR7Q09MT1JfQU1BUklMTE9fRkxVT1JFU0NFTlRFfSQocHJpbnRmICclLjBz4pSBJyAkKHNlcSAxICRXSURUSCkpJHtTRU1DT1J9IgogICAgOzsKICAgIC1iYXIxKQogICAgICBXSURUSD00MwogICAgICBlY2hvIC1lICIke0NPTE9SX0FNQVJJTExPX0ZMVU9SRVNDRU5URX0kKHByaW50ZiAnJS4wc+KUgScgJChzZXEgMSAkV0lEVEgpKSR7U0VNQ09SfSIKICAgIDs7CiAgICAtYmFyMikKICAgICAgZWNobyAtZSAiJHtDT0xPUlsxMF19PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0ke1NFTUNPUn0iCiAgICA7OwogICAgLWJhcjMpCiAgICAgIGVjaG8gLWUgIiR7Q09MT1JfVkVSREVfRkxVT1JFU0NFTlRFfeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgSR7U0VNQ09SfSIKICAgIDs7CiAgICAtYmFyNCkKCiAgICAgIGVjaG8gLWUgIiR7Q09MT1JbNV194oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCiJHtTRU1DT1J9IgogICAgOzsKICAgIC1iYXI1KQogICAgICBXSURUSD01MAogICAgICBlY2hvIC1lICIke0NPTE9SX1ZFUkRFX0ZMVU9SRVNDRU5URX0kKHByaW50ZiAnJS4wc+KUgScgJChzZXEgMSAkV0lEVEgpKSR7U0VNQ09SfSIKICAgIDs7CiAgZXNhYwp9CnBhdXNhKCl7CiAgZWNobyAtbmUgIlwwMzNbMTszN20iCiAgcmVhZCAtcCAiUHJlc2lvbmEgRW50ZXIgcGFyYSBDb250aW51YXIiCiAgZWNobyAtZSAiXGVbMG0iICAKfQp0aXR0bGUgKCkgewogICAgY2xlYXImJmNsZWFyCiAgICBtc2cgLWJhcjIKICAgIGVjaG8gLWUgIiAgICAgXDAzM1sxOzQ0OzQ0bSAgIFwwMzNbMTszM209PT09PT4+4pa64pa6IG1vZCBieSBtYW51IOKXhOKXhDw8PT09PT0gIFwwMzNbMG0gIFwwMzNbMDszM20iCiAgICAKICAgIAp9CmluZm8oKSB7CiAgY2xlYXIKCiAgdGl0dGxlCiAgcHVlcnRvPSQxCiAgZWNobyAtZSAiXGVbMTszM20gICAgICAgICBJTlNUQUxBRE9SIFVEUCBDVVNUT00gfCAiCiAgZWNobyAtZSAiXGVbMTszNm0gICAgICAgICBTT1VSQ0UgT0ZJQ0lBTCBERSBFcHJvIERldiBUZWFtIgogIGVjaG8gLWUgIiAgICAgICAgICAgICBodHRwczovL3QubWUvSmVycnlfU0JHIgogIGVjaG8gLWUgIlxlWzE7MzVtICAgICAgICAgQ09ESUdPIFJFRkFDVE9SSVpBRE8gUE9SIEplcnJ5U0JHXGVbMG0iCiAgW1sgLXogJHtwdWVydG99IF1dIHx8IGFkZC51c2VyICR7cHVlcnRvfQogIHBhdXNhCiAgY2xlYXIKfQoKW1sgISAtZCAvZXRjL3VkcCBdXSAmJiBta2RpciAtcCAvZXRjL3VkcAoKbWFrZV9zZXJ2aWNlKCl7CiAgY2F0IDw8RU9GID4gL2V0Yy9zeXN0ZW1kL3N5c3RlbS91ZHAtY3VzdG9tLnNlcnZpY2UKW1VuaXRdCkRlc2NyaXB0aW9uPXVkcC1jdXN0b20gYnkgZVBybyBEZXYuIFRlYW0KCltTZXJ2aWNlXQpVc2VyPXJvb3QKVHlwZT1zaW1wbGUKRXhlY1N0YXJ0PS9iaW4vVURQLUN1c3RvbSBzZXJ2ZXIgLS1jb25maWcgL2V0Yy91ZHAvY29uZmlnLmpzb24KV29ya2luZ0RpcmVjdG9yeT0vZXRjL3VkcC8KUmVzdGFydD1hbHdheXMKUmVzdGFydFNlYz0ycwoKW0luc3RhbGxdCldhbnRlZEJ5PWRlZmF1bHQudGFyZ2V0CkVPRgoKICBzeXN0ZW1jdGwgZGFlbW9uLXJlbG9hZAogIHN5c3RlbWN0bCBzdGFydCB1ZHAtY3VzdG9tCiAgc3lzdGVtY3RsIGVuYWJsZSB1ZHAtY3VzdG9tCiAgc3lzdGVtY3RsIHN0YXJ0IHVkcC1jdXN0b20KfQoKZG93bmxvYWRfdWRwU2VydmVyKCl7CiAgZWNobyAtZSAiXGVbMTszNG1EZXNjYXJnYW5kbyBiaW5hcmlvIFVEUHNlcnZlciBWIDEuMiIKICB3Z2V0IC1PIC9iaW4vVURQLUN1c3RvbSAnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2pvYXF1aW4xNDQ0L3VkcC9tYWluL3VkcC1hbWQ2NC5iaW4nIC1xIC0tc2hvdy1wcm9ncmVzcwogIGNobW9kICt4IC9iaW4vVURQLUN1c3RvbQogIGVjaG8gLWUgIlxlWzE7MzJtRGVzY2FyZ2EgeSBjb25maWd1cmFjacOzbiBkZWwgYmluYXJpbyBjb21wbGV0YWRhXGVbMG0iCgogIGVjaG8gLWUgIlxlWzE7MzRtRGVzY2FyZ2FuZG8gQ29uZmlnIFVEUHNlcnZlciIKICB3Z2V0IC1PIC9ldGMvdWRwL2NvbmZpZy5qc29uICdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vam9hcXVpbjE0NDQvdWRwL21haW4vY29uZmlnLmpzb24nIC1xIC0tc2hvdy1wcm9ncmVzcwogIGNobW9kIDY0NCAvZXRjL3VkcC9jb25maWcuanNvbgogIHNlZCAtaSAncy8zNjcxMi8zNjcxNS9nJyAvZXRjL3VkcC9jb25maWcuanNvbgogIGVjaG8gLWUgIlxlWzE7MzJtRGVzY2FyZ2EgeSBjb25maWd1cmFjacOzbiBkZWwgYXJjaGl2byBkZSBjb25maWd1cmFjacOzbiBjb21wbGV0YWRhXGVbMG0iCgogIG1ha2Vfc2VydmljZQp9CmxpbXBpYXJfdG1wKCkgewogICAgc3VkbyBmaW5kIC90bXAgLXR5cGUgZiAtZGVsZXRlCgp9CgpsaW1waWFyX3RtcAoKcmVtb3ZlKCl7CiAgZWNobyAiUmVtb3ZpZW5kbyBVRFAgQ1VTVE9NLi4uIgogIHN5c3RlbWN0bCBzdG9wIHVkcC1jdXN0b20KICBzeXN0ZW1jdGwgZGlzYWJsZSB1ZHAtY3VzdG9tCiAgcm0gL2Jpbi9VRFAtQ3VzdG9tCiAgcm0gL2V0Yy91ZHAKICAjcm0gL2V0Yy91ZHAvY29uZmlnLmpzb24KICBybSAvZXRjL3N5c3RlbWQvc3lzdGVtL3VkcC1jdXN0b20uc2VydmljZQogIHN5c3RlbWN0bCBkYWVtb24tcmVsb2FkCiAgZWNobyAiU2VydmljaW8geSBBcmNoaXZvcyBkZSBVRFBzZXJ2ZXIgUmVtb3ZpZG9zIENvcnJlY3RhbWVudGUuIgogIHBhdXNhCn0KCmFkZHJ1bGVzKCl7CiAgZWNobyAiSU5TVEFMQU5ETyBSRUdMQVMgREUgUFVFUlRPUyBVRFBzLi4uIgogIGlwdGFibGVzIC10IG5hdCAtQSBQUkVST1VUSU5HIC1wIHVkcCAtLWRwb3J0IDE6MTk5OTkgLWogRE5BVCAtLXRvLWRlc3RpbmF0aW9uIDo1NjY3CiAgaXB0YWJsZXMgLXQgbmF0IC1BIFBSRVJPVVRJTkcgLXAgdWRwIC0tZHBvcnQgMjAwMDA6Mzk5OTkgLWogRE5BVCAtLXRvLWRlc3RpbmF0aW9uIDozNjcxMgogIGlwdGFibGVzIC10IG5hdCAtQSBQUkVST1VUSU5HIC1wIHVkcCAtLWRwb3J0IDQwMDAwOjY1NTM1IC1qIEROQVQgLS10by1kZXN0aW5hdGlvbiA6MzY3MTUKICBzeXN0ZW1jdGwgZGFlbW9uLXJlbG9hZAogIGVjaG8gIkFncmVnYWRvIENvbiBFeGl0byBsYXMgUmVnbGFzIChaSVZQTiwgSFlTVEVSSUEsIFVEUC1DVVNUT00uKSIKICBwYXVzYQp9Cgp3YXRjaF9sb2dzKCkgewogIGNsZWFyCiAgZWNobyAtZSAiXGVbMzRtTW9zdHJhbmRvIGxvZ3MgZW4gdGllbXBvIHJlYWwgZGUgVURQIENVU1RPTS4gUHJlc2lvbmEgRW50ZXIgcGFyYSB2b2x2ZXIgYWwgTUVOVS5cZVswbSIKCiAgZGVjbGFyZSAtQSB1c2VyX2lwcyAKCiAKICBqb3VybmFsY3RsIC11IHVkcC1jdXN0b20uc2VydmljZSAtZiB8IHdoaWxlIHJlYWQgLXIgbGluZTsgZG8KICAgICAgCiAgICAgIGlmIFtbICRsaW5lID1+IChbMC05XXsyfTpbMC05XXsyfTpbMC05XXsyfSkgXV07IHRoZW4KICAgICAgICAgIHRpbWU9IiR7QkFTSF9SRU1BVENIWzFdfSIKICAgICAgZmkKCiAgICAgIGlmIFtbICRsaW5lID1+ICJDbGllbnQgY29ubmVjdGVkIiBdXTsgdGhlbgogICAgICAgICAgaWYgW1sgJGxpbmUgPX4gXFtzcmM6KFswLTldK1wuWzAtOV0rXC5bMC05XStcLlswLTldKyk6WzAtOV0rXF0gXV07IHRoZW4KICAgICAgICAgICAgICBpcD0iJHtCQVNIX1JFTUFUQ0hbMV19IgogICAgICAgICAgZmkKICAgICAgICAgIGlmIFtbICRsaW5lID1+IFxbdXNlcjooW15cXV0rKVxdIF1dOyB0aGVuCiAgICAgICAgICAgICAgdXNlcj0iJHtCQVNIX1JFTUFUQ0hbMV19IgogICAgICAgICAgICAgIHVzZXJfaXBzWyIkaXAiXT0iJHVzZXIiCiAgICAgICAgICBmaQogICAgICAgICAgZWNobyAtZSAiXDAzM1szMm1bQ29uZWN0YWRvXSBcMDMzWzBtIEhvcmE6ICR0aW1lXG5JUDogJGlwXG5Vc3VhcmlvOiAke3VzZXJfaXBzWyRpcF19XG4iCiAgICAgIGZpCgogICAgICBpZiBbWyAkbGluZSA9fiAiQ2xpZW50IGRpc2Nvbm5lY3RlZCIgXV07IHRoZW4KICAgICAgICAgIGlmIFtbICRsaW5lID1+IFxbc3JjOihbMC05XStcLlswLTldK1wuWzAtOV0rXC5bMC05XSspOlswLTldK1xdIF1dOyB0aGVuCiAgICAgICAgICAgICAgaXA9IiR7QkFTSF9SRU1BVENIWzFdfSIKICAgICAgICAgIGZpCiAgICAgICAgICB1c2VyPSIke3VzZXJfaXBzWyRpcF19IgogICAgICAgICAgZWNobyAtZSAiXDAzM1szMW1bRGVzY29uZWN0YWRvXSBcMDMzWzBtIEhvcmE6ICR0aW1lXG5JUDogJGlwXG5Vc3VhcmlvOiAke3VzZXI6LURlc2Nvbm9jaWRvfVxuIgogICAgICAgICAgdW5zZXQgdXNlcl9pcHNbIiRpcCJdCiAgICAgIGZpCiAgZG9uZSAmCgogIEpPVVJOQUxfUElEPSQhCgoKICByZWFkIC1wICJQcmVzaW9uYSBFbnRlciBwYXJhIERldGVuZXIuIgoKCiAgaWYgcHMgLXAgJEpPVVJOQUxfUElEID4gL2Rldi9udWxsOyB0aGVuCiAgICBraWxsICRKT1VSTkFMX1BJRAogICAgd2FpdCAkSk9VUk5BTF9QSUQgMj4vZGV2L251bGwKICBmaQoKICBlY2hvICJSZWdyZXNhbmRvIGFsIG1lbsO6IHByaW5jaXBhbC4uLiIKfQpmdW5jdGlvbiBtYW5hZ2VfaXB0YWJsZXMoKSB7CiAgd2hpbGUgdHJ1ZTsgZG8KICAgIGNsZWFyCiAgICB0aXR0bGUgIk1PRCBCeSBKRVJSWSIKICAgIGVjaG8gLWUgIlxlWzE7MzRtUmVnbGFzIGFjdHVhbGVzIGVuIGlwdGFibGVzIChVRFApOlxlWzBtIgogICAgaXB0YWJsZXMgLXQgbmF0IC1MIFBSRVJPVVRJTkcgLW4gLS1saW5lLW51bWJlcnMgfCBncmVwIHVkcAogICAgZWNobyAtZSAiXG5TZWxlY2Npb25lIHVuYSBhY2Npw7NuOiIKICAgIGVjaG8gLWUgIlxlWzE7MzZtICBbMV0gQWdyZWdhciByZWdsYXMgVURQIEN1c3RvbSBcZVswbSIKICAgIGVjaG8gLWUgIlxlWzE7MzFtICBbMl0gRWxpbWluYXIgdW5hIHJlZ2xhIGV4aXN0ZW50ZSBwYXJhIFVEUCBDdXN0b21cZVswbSIKICAgIGVjaG8gLWUgIlxlWzE7MzZtICBbM10gSW5mb3JtYWNpw7NuIHNvYnJlIGNvbmZpZ3VyYWNpw7NuIGRlIHJlZ2xhcyBVRFBcZVswbSIKICAgIGVjaG8gLWUgIlxlWzE7MzFtICBbMF0gVm9sdmVyIGFsIG1lbsO6IGFudGVyaW9yXGVbMG0iCgogICAgcmVhZCAtcCAiU2VsZWNjaW9uZSB1bmEgb3BjacOzbjogIiBzdWJfb3BjaW9uCiAgICBjYXNlICRzdWJfb3BjaW9uIGluCiAgICAgIDEpIAogICAgICAgIGNsZWFyCiAgICAgICAgZWNobyAtZSAiXGVbMTszNG1TZWxlY2Npb25lIGVsIHRpcG8gZGUgcmVnbGEgYSBhZ3JlZ2FyOlxlWzBtIgogICAgICAgIGVjaG8gLWUgIlxlWzE7MzZtICBbMV0gWklWUE4gKHJhbmdvIDE6MTk5OTkgUmVkaXJpZ2lkbyBhbCBQdWVydG8gNTY2NylcZVswbSIKICAgICAgICBlY2hvIC1lICJcZVsxOzM2bSAgWzJdIEhZU1RFUklBIChyYW5nbyAyMDAwMDozOTk5OSBSZWRpcmlnaWRvIGFsIFB1ZXJ0byAzNjcxMilcZVswbSIKICAgICAgICBlY2hvIC1lICJcZVsxOzM2bSAgWzNdIFVEUC1DVVNUT00gKHJhbmdvIDQwMDAwOjY1NTM1IFJlZGlyaWdpZG8gYWwgUHVlcnRvIDM2NzE1KVxlWzBtIgogICAgICAgIGVjaG8gLWUgIlxlWzE7MzZtICBbNF0gQWdyZWdhciBSYW5nbyBkZSBQdWVydG9zIFVEUCBQZXJzb25hbGl6YWRvXGVbMG0iCiAgICAgICAgcmVhZCAtcCAiU2VsZWNjaW9uZSBlbCB0aXBvIGRlIHJlZ2xhOiAiIHRpcG9fcmVnbGEKICAgICAgICBjYXNlICR0aXBvX3JlZ2xhIGluCiAgICAgICAgICAxKSAKICAgICAgICAgICAgaXB0YWJsZXMgLXQgbmF0IC1BIFBSRVJPVVRJTkcgLXAgdWRwIC0tZHBvcnQgMToxOTk5OSAtaiBETkFUIC0tdG8tZGVzdGluYXRpb24gOjU2NjcKICAgICAgICAgICAgZWNobyAtZSAiXGVbMTszNm1SZWdsYSBVRFAgYWdyZWdhZGEgZXhpdG9zYW1lbnRlIHBhcmEgRG9uV2ViICgxOjE5OTk5IC0+IDo1NjY3KS5cZVswbSIKICAgICAgICAgICAgOzsKICAgICAgICAgIDIpIAogICAgICAgICAgICBpcHRhYmxlcyAtdCBuYXQgLUEgUFJFUk9VVElORyAtcCB1ZHAgLS1kcG9ydCAyMDAwMDozOTk5OSAtaiBETkFUIC0tdG8tZGVzdGluYXRpb24gOjM2NzEyCiAgICAgICAgICAgIGVjaG8gLWUgIlxlWzE7MzZtUmVnbGEgVURQIGFncmVnYWRhIGV4aXRvc2FtZW50ZSBwYXJhIEluZXRHYW1pbmcgKDIwMDAwOjM5OTk5IC0+IDozNjcxMikuXGVbMG0iCiAgICAgICAgICAgIDs7CiAgICAgICAgICAzKSAKICAgICAgICAgICAgaXB0YWJsZXMgLXQgbmF0IC1BIFBSRVJPVVRJTkcgLXAgdWRwIC0tZHBvcnQgNDAwMDA6NjU1MzUgLWogRE5BVCAtLXRvLWRlc3RpbmF0aW9uIDozNjcxNQogICAgICAgICAgICBlY2hvIC1lICJcZVsxOzM2bVJlZ2xhIFVEUCBhZ3JlZ2FkYSBleGl0b3NhbWVudGUgcGFyYSBJbmV0R2FtaW5nICg0MDAwMDo2NTUzNSAtPiA6MzY3MTUpLlxlWzBtIgogICAgICAgICAgICA7OwogICAgICAgICAgNCkKICAgICAgICAgICAgcmVhZCAtcCAiSW5ncmVzZSBlbCByYW5nbyBkZSBwdWVydG9zIGRlIG9yaWdlbiAocG9yIGVqZW1wbG8gMTAwMDoyMDAwKTogIiByYW5nb19wdWVydG9zCiAgICAgICAgICAgIHJlYWQgLXAgIkluZ3Jlc2UgZWwgcHVlcnRvIGRlIGRlc3Rpbm8gKHByZXNpb25lIEVudGVyIHBhcmEgdXNhciAzNjcxMiBwb3IgZGVmZWN0byk6ICIgcHVlcnRvX2Rlc3Rpbm8KICAgICAgICAgICAgcHVlcnRvX2Rlc3Rpbm89JHtwdWVydG9fZGVzdGlubzotMzY3MTJ9ICAjIFNpIG5vIHNlIGluZ3Jlc2EgcHVlcnRvLCB1c2FyIDM2NzEyCiAgICAgICAgICAgIGlwdGFibGVzIC10IG5hdCAtQSBQUkVST1VUSU5HIC1wIHVkcCAtLWRwb3J0ICIkcmFuZ29fcHVlcnRvcyIgLWogRE5BVCAtLXRvLWRlc3RpbmF0aW9uIDoiJHB1ZXJ0b19kZXN0aW5vIgogICAgICAgICAgICBlY2hvIC1lICJcZVsxOzM2bVJlZ2xhIFVEUCBBZ3JlZ2FkYSBFeGl0b3NhbWVudGUgcGFyYSBSYW5nbyAkcmFuZ29fcHVlcnRvcyAtPiA6JHB1ZXJ0b19kZXN0aW5vLlxlWzBtIgogICAgICAgICAgICA7OwogICAgICAgICAgKikgCiAgICAgICAgICAgIGVjaG8gLWUgIlxlWzE7MzJtT3BjacOzbiBubyB2w6FsaWRhLlxlWzBtIgogICAgICAgICAgICA7OwogICAgICAgIGVzYWMKICAgICAgICA7OwogICAgICAyKSAKICAgICAgICBjbGVhcgogICAgICAgIGVjaG8gLWUgIlxlWzE7MzZtUmVnbGFzIGFjdHVhbGVzIGVuIGlwdGFibGVzIChVRFApOlxlWzBtIgogICAgICAgIGlwdGFibGVzIC10IG5hdCAtTCBQUkVST1VUSU5HIC1uIC0tbGluZS1udW1iZXJzIHwgZ3JlcCB1ZHAKICAgICAgICByZWFkIC1wICJJbmdyZXNlIGVsIE51bWVybyBkZSBsYSBSZWdsYSBxdWUgZGVzZWEgRWxpbWluYXIgKG8gcHJlc2lvbmUgRW50ZXIgcGFyYSBjYW5jZWxhcik6ICIgcmVnbGFfbnVtCiAgICAgICAgaWYgW1sgLW4gIiRyZWdsYV9udW0iIF1dOyB0aGVuCiAgICAgICAgICBpcHRhYmxlcyAtdCBuYXQgLUQgUFJFUk9VVElORyAkcmVnbGFfbnVtCiAgICAgICAgICBpZiBbWyAkPyAtZXEgMCBdXTsgdGhlbgogICAgICAgICAgICBlY2hvIC1lICJcZVsxOzMxbVJlZ2xhIE51bWVybyAkcmVnbGFfbnVtIEVsaW1pbmFkYSBFeGl0b3NhbWVudGUuXGVbMG0iCiAgICAgICAgICBlbHNlCiAgICAgICAgICAgIGVjaG8gLWUgIlxlWzE7MzFtTm8gc2UgcHVkbyBFbGltaW5hciBsYSBSZWdsYSBOdW1lcm8gJHJlZ2xhX251bS4gVmVyaWZpcXVlIHF1ZSBlbCBuw7ptZXJvIHNlYSBjb3JyZWN0by5cZVswbSIKICAgICAgICAgIGZpCiAgICAgICAgZWxzZQogICAgICAgICAgZWNobyAtZSAiXGVbMTszM21ObyBzZSBpbmdyZXPDsyBuaW5nw7puIG7Dum1lcm8uIE5vIHNlIHJlYWxpesOzIG5pbmd1bmEgYWNjacOzbi5cZVswbSIKICAgICAgICBmaQogICAgICAgIGVjaG8gLWUgIlxlWzE7MzRtUmVnbGFzIEFjdHVhbGVzIGVuIGlwdGFibGVzIChVRFApOlxlWzBtIgogICAgICAgIGlwdGFibGVzIC10IG5hdCAtTCBQUkVST1VUSU5HIC1uIC0tbGluZS1udW1iZXJzIHwgZ3JlcCB1ZHAKICAgICAgICA7OwogICAgICAzKSAKICAgICAgICBjbGVhcgogICAgICAgIHRpdHRsZSAiTU9EIEJ5IEpFUlJZIgogICAgICAgIG1zZyAtYW1hICJJbmZvcm1hY2nDs24gc29icmUgY29uZmlndXJhY2nDs24gZGUgcmVnbGFzIFVEUDpcbiIKICAgICAgICBtc2cgLWFtYSAiUGFyYSBlbCBmdW5jaW9uYW1pZW50byBjb3JyZWN0byBkZWwgc2VydmljaW8gVURQLFxuZXMgb2JsaWdhdG9yaW8gY29uZmlndXJhciB1bmEgcmVnbGEgZW4gaXB0YWJsZXMuIgogICAgICAgIG1zZyAtYW1hICJFc3RhIHJlZ2xhIHJlZGlyaWdlIGVsIHRyw6FmaWNvIFVEUCBhbCBwdWVydG8gbG9jYWwiCiAgICAgICAgbXNnIC1hbWEgImRvbmRlIGVsIHNlcnZpY2lvIGVzdMOhIGVzY3VjaGFuZG8uIFNpbiBlc3RhIGNvbmZpZ3VyYWNpw7NuLFxuZWwgdHLDoWZpY28gVURQIHBvZHLDrWEgbm8gbWFuZWphcnNlIGFkZWN1YWRhbWVudGUgeSBjYXVzYXIgcHJvYmxlbWFzIGRlIGNvbmVjdGl2aWRhZC4iCiAgICAgICAgOzsKICAgICAgMCkgCiAgICAgICAgYnJlYWsKICAgICAgICA7OwogICAgICAqKSAKICAgICAgICBlY2hvIC1lICJcZVsxOzMxbU9wY2nDs24gbm8gdsOhbGlkYS5cZVswbSIKICAgICAgICA7OwogICAgZXNhYwogICAgcGF1c2EKICBkb25lCn0Kd2hpbGUgdHJ1ZQpkbwogICAgaWYgW1sgJGludGVycnVwdGVkIC1lcSAxIF1dOyB0aGVuCiAgICAgICAgaW50ZXJydXB0ZWQ9MAogICAgZWxzZQogICAgICAgIGNsZWFyCiAgICAgICAgdGl0dGxlCiAgICAgICAgbXNnIC1iYXIyCiAgICAgICAgc2VydmljZV9zdGF0dXM9JChzeXN0ZW1jdGwgaXMtYWN0aXZlIHVkcC1jdXN0b20pCiAgICAgICAgaWYgW1sgIiRzZXJ2aWNlX3N0YXR1cyIgPT0gImFjdGl2ZSIgXV07IHRoZW4KICAgICAgICAgICAgc3RhdHVzX2NvbG9yPSJcZVsxOzMybVsgT04gXVxlWzBtIiAKICAgICAgICBlbHNlCiAgICAgICAgICAgIHN0YXR1c19jb2xvcj0iXGVbMTszMW1bIE9GRiBdXGVbMG0iICAKICAgICAgICBmaQogICAgICAgIGVjaG8gLWUgIlxlWzE7MzZtICBbMV0gSU5TVEFMQVIgVURQIENVU1RPTSBcZVswbSAkc3RhdHVzX2NvbG9yIgogICAgICAgICNlY2hvIC1lICJcZVsxOzM2bSAgWzJdIElOU1RBTEFSIFJFR0xBUyBVRFAgKFpJVlBOLCBIWVNURVJJQSwgVURQLUNVU1RPTSkgXGVbMG0iCiAgICAgICAgZWNobyAtZSAiXGVbMTszNm0gIFsyXSBSRUlOSUNJQVIgVURQIENVU1RPTSBcZVswbSIKICAgICAgICBlY2hvIC1lICJcZVsxOzM2bSAgWzNdIERFVEVORVIgVURQIENVU1RPTSBcZVswbSIKICAgICAgICBlY2hvIC1lICJcZVsxOzMxbSAgWzRdIFJFTU9WRVIgVURQIENVU1RPTVxlWzBtIgogICAgICAgIGVjaG8gLWUgIlxlWzE7MzZtICBbNV0gSU5GTyBERSBQUk9ZRUNUT1xlWzBtIgogICAgICAgIGVjaG8gLWUgIlxlWzE7MzZtICBbNl0gVkVSIENPTkVDVEFET1MgVURQXGVbMG0iCiAgICAgICAgZWNobyAtZSAiXGVbMTszNm0gIFs3XSBHRVNUSU9OQVIgUkVHTEFTIElQVEFCTEVTXGVbMG0iCiAgICAgICAgZWNobyAtZSAiXGVbMTszMW0gIFswXSBWb2x2ZXJcZVswbSIKICAgIGZpCgogICAgcmVhZCAtcCAiU2VsZWNjaW9uZSB1bmEgb3BjacOzbjogIiBvcGNpb24KICAgIGNhc2UgJG9wY2lvbiBpbgogICAgICAgIDEpIGRvd25sb2FkX3VkcFNlcnZlcjs7CiAgICAgICAgIzIpIGFkZHJ1bGVzOzsKICAgICAgICAyKSBzeXN0ZW1jdGwgcmVzdGFydCB1ZHAtY3VzdG9tOyBlY2hvICJVRFAgQ1VTVE9NIFJlaW5pY2lhZG8uIjsgcGF1c2E7OwogICAgICAgIDMpIHN5c3RlbWN0bCBzdG9wIHVkcC1jdXN0b207IGVjaG8gIlVEUCBDVVNUT00gRGV0ZW5pZG8uIjsgcGF1c2E7OwogICAgICAgIDQpIHJlbW92ZTs7CiAgICAgICAgNSkgaW5mbzs7CiAgICAgICAgNikgd2F0Y2hfbG9nczs7CiAgICAgICAgNykgbWFuYWdlX2lwdGFibGVzOzsKICAgICAgICAwKSBleGl0OzsKICAgICAgICAqKSBlY2hvIC1lICJcZVsxOzMxbU9wY2nDs24gbm8gdsOhbGlkYS5cZVswbSI7IHBhdXNhOzsKICAgIGVzYWMKZG9uZQ==
B14CK-KN1GH7
source ${NFS}
rm -rf ${NFS}